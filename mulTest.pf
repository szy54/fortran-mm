#define N 1000

@test
subroutine oneByOneTest()
    use mult
    use pfunit_mod
    implicit none
    real (kind=8) :: mtx1(1,1), mtx2(1,1), mtx3(1,1)
    integer(kind=4)::stat
    mtx1(1,1)=3
    mtx2(1,1)=11
    call mm(mtx1, mtx2, mtx3, stat)
    @assertEqual(33, mtx3(1,1))
end

@test
subroutine oneByNTest()
    use mult
    use pfunit_mod
    implicit none
    real (kind=8) :: mtx1(1,N), mtx2(N,1), mtx3(1,1)
    integer(kind=4)::stat, i
    do i=1,N
        mtx1(1,i)=1
        mtx2(i,1)=1
    end do
    call mm(mtx1, mtx2, mtx3, stat)
    @assertEqual(N, mtx3(1,1))
end

@test
subroutine NByOneTest()
    use mult
    use pfunit_mod
    implicit none
    real (kind=8) :: mtx1(N,1), mtx2(1,N), mtx3(N,N)
    integer(kind=4)::stat, i, j
    do i=1, N
        mtx1(i, 1)=1
        mtx2(1, i)=1
        do j=1,N
           mtx3(i,j)=1
        end do
    end do

    call mm(mtx1, mtx2, mtx3, stat)
    @assertEqual(mtx3, mtx3)
end

@test
subroutine NByNTest()
    use mult
    use pfunit_mod
    implicit none
    real (kind=8) :: mtx1(N,N), mtx2(N,N), mtx3(N,N)
    integer(kind=4)::stat, i, j
    do i=1, N
        do j=1, N
            mtx1(i, 1)=1
            mtx2(i,j)=1
            mtx3(i,j)=1
        end do
    end do

    call mm(mtx1, mtx2, mtx3, stat)
    @assertEqual(mtx3, mtx3)
end
